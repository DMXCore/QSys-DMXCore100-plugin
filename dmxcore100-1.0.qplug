-- Plugin for DMX Core 100 Devices by DMX Pro Sales
-- Built in Lua

PluginInfo = {
    Name = "DMX Core~100 (1.0)", -- The tilde here indicates folder structure in the Schematic Elements pane
    Version = "1.0",
    Id = "dmx.core.100.1.0", -- show this is just a unique id. Show some commented out 'fun' unique ids
    Description = [[Plugin to control the DMX Core 100 lighting controller for sACN/ArtNet using presets and playback features]],
    ShowDebug = true,
    Author = "DMX Pro Sales"
}

function GetPrettyName()
    return string.format("DMX Core 100 v%s", PluginInfo.Version)
end

-- Once you've drawn your plugin in Designer, you can determine what colors you use a lot. Save yourself some time by putting them in a table, and then simply calling them later.
local Colors = {
    White = {255, 255, 255},
    Black = {0, 0, 0},
    Red = {255, 0, 0},
    Green = {0, 255, 0}
}

-- We can let users determine some of the plugin properties by exposing them here
-- While this function can be very useful, it is completely optional and not always needed.
-- If no Properties are set here, only the position and fill properties of your plugin will show in the Properties pane
function GetProperties()
    props = {}

    return props
end

-- The below function is optional (like GetProperties() is), but it can allow further customization of what users can and can't do with your plugin.
-- In this example, when Model 1 is selected in the properties pane, the ability to modify some of the properties will be hidden, only allowing customization with Model 2
-- Another application of this is if you have different input/output types for different models, and want those properties to be dynamic in the Properties pane
function RectifyProperties(props)
    return props
end

-- The below function is where you will populate the controls for your plugin.
-- If you've written some of the Runtime code already, simply use the control names you populated in Text Controller/Control Script, and use their Properties to inform the values here
-- ControlType can be Button, Knob, Indicator or Text
-- ButtonType ( ControlType == Button ) can be Momentary, Toggle or Trigger
-- IndicatorType ( ControlType == Indicator ) can be Led, Meter, Text or Status
-- ControlUnit ( ControlType == Knob ) can be Hz, Float, Integer, Pan, Percent, Position or Seconds
function GetControls(props)
    local ctls = {
        {
            Name = "ScriptActive",
            ControlType = "Indicator",
            IndicatorType = "Led",
            PinStyle = "Output",
            UserPin = true
        },
        {
            Name = "PresetActive",
            ControlType = "Indicator",
            IndicatorType = "Led",
            PinStyle = "Output",
            UserPin = true,
            Count = 6
        },
        {
            Name = "CueActive",
            ControlType = "Indicator",
            IndicatorType = "Led",
            PinStyle = "Output",
            UserPin = true,
            Count = 6
        },
        {
            Name = "Blink",
            ControlType = "Button",
            ButtonType = "Trigger",
            Count = 1,
            PinStyle = "Both",
            UserPin = true
        },
        {
            Name = "GoToPreset",
            ControlType = "Button",
            ButtonType = "Trigger",
            PinStyle = "Input",
            Count = 6,
            UserPin = true
        },
        {
            Name = "PlayCue",
            ControlType = "Button",
            ButtonType = "Trigger",
            PinStyle = "Input",
            Count = 6,
            UserPin = true
        },
        {
            Name = "FadeToBlack",
            ControlType = "Button",
            ButtonType = "Trigger",
            PinStyle = "Input",
            Count = 1,
            UserPin = true
        },
        {
            Name = "FadeTo100",
            ControlType = "Button",
            ButtonType = "Trigger",
            PinStyle = "Input",
            Count = 1,
            UserPin = true
        },
        {
            Name = "StopCue",
            ControlType = "Button",
            ButtonType = "Trigger",
            PinStyle = "Input",
            Count = 1,
            UserPin = true
        },
        {
            Name = "StatusDisplay",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true
        },
        {
            Name = "FadeDurationDisplay",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true
        },
        {
            Name = "LoopCountDisplay",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true
        },
        {
            Name = "PresetCode",
            ControlType = "Text",
            PinStyle = "Both",
            UserPin = true,
            Count = 6
        },
        {
            Name = "CueCode",
            ControlType = "Text",
            PinStyle = "Both",
            UserPin = true,
            Count = 6
        },
        {
            Name = "DMXCoreIP",
            ControlType = "Text",
            PinStyle = "Both",
            UserPin = true
        },
        {
            Name = "DMXCorePort",
            ControlType = "Knob",
            ControlUnit = "Integer",
            PinStyle = "Both",
            Count = 1,
            Min = 1,
            Max = 65535,
            UserPin = true
        },
        {
            Name = "MasterDimmer",
            ControlType = "Knob",
            ControlUnit = "Percent",
            PinStyle = "Both",
            Count = 1,
            UserPin = true
        },
        {
            Name = "FadeDuration",
            ControlType = "Knob",
            ControlUnit = "Seconds",
            PinStyle = "Output",
            Min = 0,
            Max = 5,
            Count = 1,
            UserPin = true
        },
        {
            Name = "LoopCount",
            ControlType = "Knob",
            ControlUnit = "Integer",
            PinStyle = "Both",
            Count = 1,
            Min = 0,
            Max = 100,
            UserPin = true
        }
    }
    return ctls
end

-- Variable holding Page Names for ease
local pagenames = {"Preset", "Cue", "Network"}

-- This function allows you to populate pages in your plugin.
function GetPages(props)
    local pages = {}
    for i in ipairs(pagenames) do
        table.insert(pages, {name = pagenames[i]})
    end
    return pages
end

-- This function allows you to layout pages in your plugin.
function GetControlLayout(props)
    local layout, graphics = {}, {}
    local currentPage = pagenames[props["page_index"].Value]
    local font = "Lato"
    local fontstyle = "Bold"
    local function Led(prettyname, legend, x, y, size_x, size_y)
        size_x = size_x or 30
        size_y = size_y or 30
        return {
            PrettyName = prettyname,
            Legend = legend,
            Size = {size_x, size_y},
            Position = {x, y},
            Style = "Led",
            Color = {0, 255, 0},
            OffColor = {102, 102, 102},
            UnlinkOffColor = true
        }
    end
    local function Button(prettyname, legend, x, y, size_x, size_y)
        size_x = size_x or 60
        size_y = size_y or 60
        return {
            PrettyName = prettyname,
            Legend = legend,
            Size = {size_x, size_y},
            Position = {x, y},
            Style = "Button",
            ButtonStyle = "Trigger",
            Font = font,
            FontSize = 12,
            FontStyle = fontstyle,
            Margin = 0,
            Radius = 8,
            Padding = 2,
            StrokeWidth = 2,
            StrokeColor = {0, 0, 0},
            OffColor = {102, 102, 102},
            UnlinkOffColor = true
        }
    end
    local function Fader(prettyname, legend, x, y)
        return {
            PrettyName = prettyname,
            Legend = legend,
            Style = "Fader",
            FontSize = 12,
            Font = font,
            FontStyle = fontstyle,
            Color = {102, 102, 102},
            Margin = 0,
            Radius = 8,
            Padding = 2,
            StrokeColor = {0, 0, 0},
            StrokeWidth = 2,
            Position = {x, y},
            Size = {60, 120},
            UnlinkOffColor = true,
            OffColor = {0, 0, 0}
        }
    end
    local function Box(prettyname, legend, pos_x, pos_y, size_x, size_y, fontsize, textalign)
        fontsize = fontsize or 14
        textalign = textalign or "Center"
        return {
            PrettyName = prettyname,
            Legend = legend,
            FontSize = fontsize,
            Font = font,
            FontStyle = fontstyle,
            Color = {51, 51, 51},
            Margin = 0,
            Radius = 8,
            Padding = 2,
            StrokeColor = {0, 0, 0},
            StrokeWidth = 2,
            Position = {pos_x, pos_y},
            Size = {size_x, size_y},
            UnlinkOffColor = true,
            OffColor = {102, 102, 102},
            HTextAlign = textalign
        }
    end
    local function Background(size_x, size_y)
        return {
            Type = "GroupBox",
            Fill = {26, 26, 26},
            StrokeColor = {138, 0, 133},
            StrokeWidth = 2,
            Color = {255, 0, 0},
            CornerRadius = 8,
            Position = {0, 0},
            Size = {size_x, size_y}
        }
    end
    local function Background2(pos_x, pos_y, size_x, size_y)
        return {
            Type = "GroupBox",
            Fill = {51, 51, 51},
            CornerRadius = 8,
            Position = {pos_x, pos_y},
            Size = {size_x, size_y}
        }
    end
    local function Text(text, fontsize, pos_x, pos_y, size_x, size_y, textalign)
        textalign = textalign or "Center"
        return {
            Text = text,
            Type = "Label",
            FontSize = fontsize,
            Font = font,
            FontStyle = fontstyle,
            Color = {255, 255, 255},
            HTextAlign = textalign,
            VTextAlign = "Center",
            Radius = 8,
            Position = {pos_x, pos_y},
            Size = {size_x, size_y}
        }
    end
    if currentPage == "Playbacks" then
        table.insert(graphics, Background(490, 700))
        table.insert(graphics, Background2(10, 90, 80, 600))
        layout["masterRelease"] = Button("Playback~Master~Release", "Release", 20, 100)
        layout["masterFade"] = Box("Playback~Master~Fade", "Fade", 20, 190, 60, 30)
        layout["masterFadeTrigger"] = Button("Playback~Master~Fade trigger", "Fade", 20, 220, 60, 30)
        layout["masterSolo"] = Box("Playback~Master~Solo", "Solo", 20, 280, 60, 30)
        layout["masterSoloTrigger"] = Button("Playback~Master~Solo", "Solo", 20, 310, 60, 30)
        layout["masterRate"] = Fader("Playback~Master~Rate", "Rate", 20, 400)
        layout["masterIntensity"] = Fader("Playback~Master~Intensity", "Intensity", 20, 520)
        table.insert(graphics, Text("Master", 20, 10, 650, 80, 30))
        table.insert(graphics, Background2(100, 90, 380, 600))
        for i = 1, 6 do
            --layout["playbackStatus "..i] = Led("Playback~"..i.."~Status", "Status+", 125+(60*(i-1)), 100)
            layout["goPlus " .. i] = Button("Playback~" .. i .. "~Go+", "Go+", 110 + (60 * (i - 1)), 100)
            layout["goMinus " .. i] = Button("Playback~" .. i .. "~Go-", "Go-", 110 + (60 * (i - 1)), 160)
            layout["release " .. i] = Button("Playback~" .. i .. "~Release", "Release", 110 + (60 * (i - 1)), 220)
            layout["solo " .. i] = Button("Playback~" .. i .. "~Solo", "Solo", 110 + (60 * (i - 1)), 280)
            layout["jump " .. i] = Box("Playback~" .. i .. "~Jump", "Jump", 110 + (60 * (i - 1)), 340, 60, 30)
            layout["jumpTrigger " .. i] =
                Box("Playback~" .. i .. "~Jump trigger", "Jump", 110 + (60 * (i - 1)), 370, 60, 30)
            layout["rate " .. i] = Fader("Playback~" .. i .. "~Rate", "Rate", 110 + (60 * (i - 1)), 400)
            layout["intensity " .. i] = Fader("Playback~" .. i .. "~Intensity", "Intensity", 110 + (60 * (i - 1)), 520)
            table.insert(graphics, Text(tostring(i), 24, 110 + (60 * (i - 1)), 650, 60, 30))
        end
    end
--[[    if controlMode == "Advanced" then
        if currentPage == "Tracks" then
            table.insert(graphics, Background(490, 180))
            table.insert(graphics, Background2(25, 90, 440, 80))
            layout["trackSelect"] = Box("Tracks~Select", "Select", 35, 100, 60, 30)
            layout["trackSelectTrigger"] = Button("Tracks~Select trigger", "Select", 35, 130, 60, 30)
            layout["trackErase"] = Button("Tracks~Erase", "Erase", 95, 100)
            layout["trackRecord"] = Button("Tracks~Record", "Record", 155, 100)
            layout["trackStop"] = Button("Tracks~Stop", "Stop", 215, 100)
            layout["trackSnapshotDmx"] = Button("Tracks~Snapshot DMX", "Snapshot\nDMX", 275, 100)
            layout["trackSnapshotArtnet"] = Button("Tracks~Snapshot ArtNet", "Snapshot\nArtnet", 335, 100)
            layout["trackSnapshotSacn"] = Button("Tracks~Snapshot sACN", "Snapshot\nsACN", 395, 100)
        end
        if currentPage == "Timecode" then
            table.insert(graphics, Background(490, 180))
            table.insert(graphics, Background2(55, 90, 380, 80))
            layout["timecodeStart"] = Button("Timecode~Start", "Start", 65, 100)
            layout["timecodeStop"] = Button("Timecode~Stop", "Stop", 125, 100)
            layout["timecodeRestart"] = Button("Timecode~Restart", "Restart", 185, 100)
            layout["timecodePause"] = Button("Timecode~Pause", "Pause", 245, 100)
            layout["timecodeSet"] = Box("Timecode~Set", "Set", 305, 100, 120, 30)
            layout["timecodeSetTrigger"] = Button("Timecode~Set trigger", "Set timecode", 305, 130, 120, 30)
        end
        if currentPage == "Actionlist" then
            table.insert(graphics, Background(490, 650))
            table.insert(graphics, Background2(115, 90, 260, 270))
            for i = 1, 4 do
                layout["actionlistEnable " .. i] =
                    Button("Showcontrol~Actionlist~Enable " .. i, "Enable", 125 + (60 * (i - 1)), 100)
                layout["actionlistDisable " .. i] =
                    Button("Showcontrol~Actionlist~Disable " .. i, "Disable", 125 + (60 * (i - 1)), 160)
                layout["actionlistAction " .. i] =
                    Box("Showcontrol~Actionlist~ " .. i .. " Action", "Action", 125 + (60 * (i - 1)), 250, 60, 30)
                layout["actionlistActionTrigger " .. i] =
                    Box(
                    "Showcontrol~Actionlist~ " .. i .. " Action trigger",
                    "Action",
                    125 + (60 * (i - 1)),
                    280,
                    60,
                    30
                )
                table.insert(graphics, Text(tostring(i), 24, 125 + (60 * (i - 1)), 320, 60, 30))
            end
            table.insert(graphics, Background2(115, 370, 260, 270))
            for i = 5, 8 do
                layout["actionlistEnable " .. i] =
                    Button("Showcontrol~Actionlist~Enable " .. i, "Enable", 125 + (60 * (i - 5)), 380)
                layout["actionlistDisable " .. i] =
                    Button("Showcontrol~Actionlist~Disable " .. i, "Disable", 125 + (60 * (i - 5)), 440)
                layout["actionlistAction " .. i] =
                    Box("Showcontrol~Actionlist~ " .. i .. " Action", "Action", 125 + (60 * (i - 5)), 530, 60, 30)
                layout["actionlistActionTrigger " .. i] =
                    Box(
                    "Showcontrol~Actionlist~ " .. i .. " Action trigger",
                    "Action",
                    125 + (60 * (i - 5)),
                    560,
                    60,
                    30
                )
                table.insert(graphics, Text(tostring(i), 24, 125 + (60 * (i - 5)), 600, 60, 30))
            end
        end
        if currentPage == "Variable" then
            table.insert(graphics, Background(490, 620))
            table.insert(graphics, Background2(85, 90, 320, 210))
            for i = 1, 5 do
                layout["variableSet " .. i] =
                    Box("Showcontrol~Variable~Set " .. i, "Set", 95 + (60 * (i - 1)), 100, 60, 30)
                layout["variableSetTrigger " .. i] =
                    Button("Showcontrol~Variable~Set trigger " .. i, "Set", 95 + (60 * (i - 1)), 130, 60, 30)
                layout["variableRefresh " .. i] =
                    Button("Showcontrol~Variable~Refresh " .. i, "Refresh", 95 + (60 * (i - 1)), 190)
                table.insert(graphics, Text(tostring(i), 24, 95 + (60 * (i - 1)), 260, 60, 30))
            end
            table.insert(graphics, Background2(85, 310, 320, 210))
            for i = 6, 10 do
                layout["variableSet " .. i] =
                    Box("Showcontrol~Variable~Set " .. i, "Set", 95 + (60 * (i - 6)), 320, 60, 30)
                layout["variableSetTrigger " .. i] =
                    Button("Showcontrol~Variable~Set trigger " .. i, "Set", 95 + (60 * (i - 6)), 350, 60, 30)
                layout["variableRefresh " .. i] =
                    Button("Showcontrol~Variable~Refresh " .. i, "Refresh", 95 + (60 * (i - 6)), 410)
                table.insert(graphics, Text(tostring(i), 24, 95 + (60 * (i - 6)), 480, 60, 30))
            end
            table.insert(graphics, Background2(205, 530, 80, 80))
            layout["variableRefreshAll"] = Button("Showcontrol~Variable~Refresh All", "Refresh\nAll", 215, 540)
        end
        if currentPage == "DMX control" then
            table.insert(graphics, Background(490, 360))
            table.insert(graphics, Background2(205, 90, 80, 260))
            table.insert(graphics, Text("Channel", 14, 215, 100, 60, 30))
            layout["dmxChannel"] = Box("Showcontrol~Direct DMX control~Set DMX Channel", "Channel", 215, 140, 60, 30)
            layout["dmxValue"] = Fader("Showcontrol~Direct DMX control~Set DMX Value", "Value", 215, 180)
            layout["dmxTrigger"] = Button("Showcontrol~Direct DMX control~Execute", "Execute", 215, 310, 60, 30)
        end
        if currentPage == "Timer" then
            table.insert(graphics, Background(490, 460))
            table.insert(graphics, Background2(115, 90, 260, 360))
            for i = 1, 4 do
                layout["timerStart " .. i] = Button("Showcontrol~Timer~Start " .. i, "Start", 125 + (60 * (i - 1)), 100)
                layout["timerStop " .. i] = Button("Showcontrol~Timer~Stop " .. i, "Stop", 125 + (60 * (i - 1)), 160)
                layout["timerPause " .. i] = Button("Showcontrol~Timer~Pause " .. i, "Pause", 125 + (60 * (i - 1)), 220)
                layout["timerRestart " .. i] =
                    Button("Showcontrol~Timer~Restart " .. i, "Restart", 125 + (60 * (i - 1)), 280)
                layout["timerSet " .. i] =
                    Box("Showcontrol~Timer~Set " .. i, "Set " .. i, 125 + (60 * (i - 1)), 340, 60, 30)
                layout["timerSetTrigger " .. i] =
                    Button("Showcontrol~Timer~Set trigger" .. i, "Set", 125 + (60 * (i - 1)), 370, 60, 30)
                table.insert(graphics, Text(tostring(i), 24, 125 + (60 * (i - 1)), 410, 60, 30))
            end
        end
    end]]
    if currentPage == "Network" then
        table.insert(graphics, Background(490, 420))
        layout.ipAddress = Box("Network~IP Address", "DMXCoreIP", 145, 160, 325, 60, 40, "Left")
        layout.port = Box("Network~Communications Port", "DMXCorePort", 145, 220, 325, 60, 40, "Left")
        layout.blink = Button("Network~Blink", "Blink", 145, 340)
        table.insert(graphics, Background2(10, 90, 470, 320))
        table.insert(graphics, Text("IP Address", 24, 20, 160, 120, 60, "Left"))
        table.insert(graphics, Text("OSC Port", 24, 20, 220, 120, 60, "Left"))
        table.insert(graphics, Text("Identify", 24, 20, 340, 120, 60, "Left"))
    end
    --Header
    table.insert(graphics, Background2(10, 10, 470, 70))
    table.insert(
        graphics,
        {
            --Logo
            Type = "Image",
            Image = "",
            Position = {20, 20},
            Size = {250, 46}
        }
    )
    return layout, graphics
end

if not Controls then
    return
end

local masterDimmer = -1
local fadeDuration = -1
local loopCount = -1

local SendFadeDuration = false

local LogReceived = false
local LogPing = false

local SendUpdates = false
local Connected = false
local blinkTimer = 0
local updateTimer = 0
local lastReceived = 0
local currentPreset = ""
local currentCue = ""
IP = ""
port = 8000
rxPort = 9000

local function lpak(_, ...)
    return string.pack(...)
end

local oLvpk = {pack = lpak, unpack = string.unpack}
local mtab = {0, 3, 2, 1}

-- ++++++++++++++++++++++++++++++++++++++++++++++++++++
-- osc private functions
local endpad = string.char(0, 0, 0, 0)
function oscString(Str)
    local newS = Str .. string.char(0x0)
    local mod = string.len(newS) % 4
    return (newS .. string.sub(endpad, 1, mtab[mod + 1]))
end

function oscType(Str)
    return (oscString("," .. Str))
end

function oscSymbol(Str)
    local s1, _ = string.find(Str, " ")
    return (oscString(string.sub(Str, 1, s1)))
end

function align4(n)
    return (math.floor((n - 1) / 4) + 1) * 4
end

function padBin(binD)
    local nwD = binD
    for i = 1, align4(#binD) - #binD do
        nwD = nwD .. string.char(0)
    end
    return nwD
end
-- +++++++++++++++++++++++++++++++++++++++++++++++++++
-- Creates an OSC packet
-- currently accepts the following types:
-- s  string
-- S  alt string
-- c  a char (32 bit int)
-- i  int (32-bit)
-- m  MIDI data, four bytes: channel, status, d1, d2
-- t  TIME data, two 32 ints: seconds, fraction of seconds
-- f  float (32-bit)
-- b  BLOB data, binary bytes
-- h  signed int (64-bit)
-- d  double float (64-bit)
--        The following have NO data block (but are DEcoded to a string: 'NIL', 'TRUE', etc...
-- N  NIL
-- T  TRUE
-- F  FALSE
-- I  Infinitum
-- [  Array begin
-- ]  Array end
function oscPacket(addrS, typeS, msgTab)
    local strl, types  -- , tBlb

    if typeS == nil then
        strl = oscString(addrS) .. oscType("") -- no type & no data...EMPTY type block included in msg (comma and three zeros)
    else
        strl = oscString(addrS) .. oscType(typeS)

        if msgTab ~= nil then -- add data if type has arguments...some do not
            for argC = 1, #msgTab do
                types = string.sub(typeS, argC, argC)
                if types == "s" or types == "S" then
                    strl = strl .. oscString(msgTab[argC])
                elseif types == "f" then
                    strl = strl .. oLvpk.pack("string", ">f", msgTab[argC])
                elseif types == "i" then
                    strl = strl .. oLvpk.pack("string", ">i4", msgTab[argC])
                elseif types == "b" then
                    local tBlb = padBin(msgTab[argC])
                    strl = strl .. oLvpk.pack("string", ">i4", #msgTab[argC]) .. tBlb
                elseif types == "h" then
                    strl = strl .. oLvpk.pack("string", ">i8", msgTab[argC])
                elseif types == "d" then
                    strl = strl .. oLvpk.pack("string", ">d", msgTab[argC])
                elseif types == "c" then
                    strl = strl .. oLvpk.pack("string", ">I", tostring(utf8.codepoint(msgTab[argC])))
                elseif types == "m" then
                    strl = strl .. oLvpk.pack("string", "c4", msgTab[argC])
                elseif types == "t" then
                    strl = strl .. oLvpk.pack("string", "c8", msgTab[argC])
                elseif
                    types == "N" or types == "T" or types == "F" or types == "I" or types == string.char(91) or
                        types == string.char(93)
                 then
                    -- no data
                else
                    return (nil) -- unknown type
                end
            end
        end
    end
    return (strl)
end
-- unpack UDP OSC msg packet into:
--	oscAddr = oA
--	oscType = oT
--	oscData = oD
function oscUnpack(udpM)
    local oA, oT, oD

    oA = udpM:match("^[%p%w]+%z+")
    oT = udpM:match(",[%a%[+%]+]+")
    if oA ~= nil then
        local aBlk = #oA
        oA = oA:gsub("%z", "")
        if oT ~= nil then
            local dataBlk = aBlk + (math.floor((#oT) / 4) + 1) * 4
            oD = string.sub(udpM, dataBlk + 1)
            oT = oT:match("[^,]+")
        end
    end
    return oA, oT, oD
end
-- unpack OSC data block
-- currently unpacks the following types:
-- s  string
-- S  alt string
-- c  a char (but 32 bit int)
-- i  int (32-bit)
-- m  MIDI data, four bytes: channel, status, d1, d2
-- t  TIME data, two 32 ints: seconds, fraction of seconds
-- f  float (32-bit)
-- b  BLOB data, binary bytes
-- h  signed int (64-bit)
-- d  double float (64-bit)
--        These have no data block; a string ID is inserted in unpack table:
-- N  'NIL'
-- T  'TRUE'
-- F  'FALSE'
-- I  'INFINITUM'
-- [  'ARRAY_BEGIN'
-- ]  'ARRAY_END'
function oscDataUnpack(oT, oD)
    local tc, iv, nx, zloc
    local dTbl = {}
    if oT ~= nil then
        for i = 1, #oT do
            tc = oT:sub(i, i)
            if tc == "f" then
                iv, nx = oLvpk.unpack(">f", oD)
                oD = string.sub(oD, 5)
                table.insert(dTbl, tonumber(iv))
            elseif tc == "s" or tc == "S" then
                zloc, nx = string.find(oD, "\0")
                local tmpS = string.sub(oD, 1, zloc - 1)
                iv = string.format("%s", tmpS)
                nx = zloc + mtab[zloc % 4 + 1]
                oD = string.sub(oD, nx + 1)
                table.insert(dTbl, tostring(iv))
            elseif tc == "b" then
                iv, nx = oLvpk.unpack(">i", oD)
                local blb = string.sub(oD, 1, iv + nx)
                oD = string.sub(oD, align4(iv - 1) + nx)
                table.insert(dTbl, blb)
            elseif tc == "i" or tc == "r" then
                iv, nx = oLvpk.unpack(">i", oD)
                oD = string.sub(oD, 5)
                table.insert(dTbl, tonumber(iv))
            elseif tc == "c" then
                iv, nx = oLvpk.unpack(">i", oD)
                oD = string.sub(oD, 5)
                table.insert(dTbl, utf8.char(iv))
            elseif tc == "m" then
                iv, nx = oLvpk.unpack("c4", oD)
                oD = string.sub(oD, 5)
                table.insert(dTbl, iv)
            elseif tc == "t" then
                iv, nx = oLvpk.unpack("c8", oD)
                oD = string.sub(oD, 9)
                table.insert(dTbl, iv)
            elseif tc == "h" then
                iv, nx = oLvpk.unpack(">i8", oD)
                oD = string.sub(oD, 9)
                table.insert(dTbl, tonumber(iv))
            elseif tc == "d" then
                iv, nx = oLvpk.unpack(">d", oD)
                oD = string.sub(oD, 9)
                table.insert(dTbl, tonumber(iv))
            elseif tc == "I" then
                table.insert(dTbl, "IMPULSE")
            elseif tc == "T" then
                table.insert(dTbl, "TRUE")
            elseif tc == "F" then
                table.insert(dTbl, "FALSE")
            elseif tc == "N" then
                table.insert(dTbl, "NIL")
            elseif tc == string.char(91) then
                table.insert(dTbl, "ARRAY_BEGIN")
            elseif tc == string.char(93) then
                table.insert(dTbl, "ARRAY_END")
            end
        end
    end
    return dTbl
end

function SetActive(ledControl, codeControl, currentValue)
    local ledValue

    if currentValue == codeControl.String and codeControl.String ~= "" then
        ledValue = 1
    else
        ledValue = 0
    end

    ledControl.Position = ledValue
end

function HandleData(socket, packet)
    local oscADDR, oscTYPE, oscDATA = oscUnpack(packet.Data)
    local dataT = oscDataUnpack(oscTYPE, oscDATA)

    lastReceived = updateTimer

    if dataT[1] ~= nil then
        if oscADDR == "/dmxcore/dimmer/master" then
            print("Master dimmer = " .. dataT[1])
            Controls.MasterDimmer.Position = dataT[1]
        elseif oscADDR == "/dmxcore/status/preset" then
            print("Preset = " .. dataT[1])
            currentPreset = dataT[1]
            if currentPreset ~= "" then
                currentCue = ""
            end
        elseif oscADDR == "/dmxcore/status/cue" then
            print("Cue = " .. dataT[1])
            currentCue = dataT[1]
            if currentCue ~= "" then
                currentPreset = ""
            end
        elseif oscADDR == "/dmxcore/status/text" then
            print("Status = " .. dataT[1])
            Controls.StatusDisplay.String = dataT[1]
        end
    end

    SetActive(Controls.PresetActive[1], Controls.PresetCode[1], currentPreset)
    SetActive(Controls.PresetActive[2], Controls.PresetCode[2], currentPreset)
    SetActive(Controls.PresetActive[3], Controls.PresetCode[3], currentPreset)
    SetActive(Controls.PresetActive[4], Controls.PresetCode[4], currentPreset)
    SetActive(Controls.PresetActive[5], Controls.PresetCode[5], currentPreset)
    SetActive(Controls.PresetActive[6], Controls.PresetCode[6], currentPreset)

    SetActive(Controls.CueActive[1], Controls.CueCode[1], currentCue)
    SetActive(Controls.CueActive[2], Controls.CueCode[2], currentCue)
    SetActive(Controls.CueActive[3], Controls.CueCode[3], currentCue)
    SetActive(Controls.CueActive[4], Controls.CueCode[4], currentCue)
    SetActive(Controls.CueActive[5], Controls.CueCode[5], currentCue)
    SetActive(Controls.CueActive[6], Controls.CueCode[6], currentCue)

    if LogReceived then
        -- output to console
        print(oscADDR, oscTYPE)
        if dataT ~= nil then
            for i, v in ipairs(dataT) do
                print(i .. ")", v)
            end
        end
    end
end

local tokenize = function(input, sep)
    local t = {}
    for str in string.gmatch(input, "([^" .. sep .. "]+)") do
        table.insert(t, str)
    end
    return t
end

local getIpAddress = function()
    local ipAddress = Controls.DMXCoreIP.String
    print("IP address is set to: ", ipAddress)
    if ipAddress == "" then
        print("IP address can not be empty, setting to default: ", defaultIpAddress)
        ipAddress = defaultIpAddress
        Controls.DMXCoreIP.String = defaultIpAddress
    end
    local ipTable = tokenize(ipAddress, ".")
    if #ipTable ~= 4 then
        ipAddress = "INVALID"
    else
        for _, v in ipairs(ipTable) do
            if tonumber(v) == nil or tonumber(v) < 0 or tonumber(v) > 255 then
                ipAddress = "INVALID"
                break
            end
        end
    end
    if ipAddress == "INVALID" then
        print("Invalid IP address, setting to default: ", defaultIpAddress)
        ipAddress = defaultIpAddress
        Controls.DMXCoreIP.String = defaultIpAddress
    end
    return ipAddress
end

local getPort = function()
    local port = Controls.DMXCorePort.String
    print("Port is set to: ", port)
    if string.match(port, "%D") then
        print("Invalid port, setting to default: ", defaultPort)
        port = defaultPort
        Controls.DMXCorePort.String = defaultPort
    end
    port = tonumber(port)
    if port == nil then
        print("Port can not be empty, setting to default: ", defaultPort)
        port = defaultPort
        Controls.DMXCorePort.String = defaultPort
    end
    return port
end

Controls.StatusDisplay.String = ""
fadeDuration = Controls.FadeDuration.Value
loopCount = Controls.LoopCount.Value
Controls.FadeDurationDisplay.String = string.format("%.1f", fadeDuration) .. " s"
if loopCount == 0 then
    Controls.LoopCountDisplay.String = "Infinite"
else
    Controls.LoopCountDisplay.String = string.format("%.0f", loopCount)
end

OscSocket = UdpSocket.New()

-- Open socket
OscSocket:Open(nil, rxPort)

-- When data is received, handle it. Here I'm translating using the helper function above, then if the address matches a particular one, sending the values into a function built to handle that.
OscSocket.Data = HandleData

IP = getIpAddress()
port = getPort()

function timer1_func()
    blinkTimer = blinkTimer + 1

    Controls.ScriptActive.Position = blinkTimer % 2

    if blinkTimer == 5 then
        -- 5 seconds
        if LogPing then
            print("Sending Ping Message")
        end
        OscSocket:Send(IP, port, oscPacket("/ping", nil, {}))
        blinkTimer = 0
    end
end

OscSocket:Send(IP, port, oscPacket("/dmxcore/status", nil, {}))

-- Add the timer
Timer1 = Timer.New()
Timer1.EventHandler = timer1_func

-- and start it with a delay of 1000 ms
Timer1:Start(1)

-- Wire up event handlers
Controls.DMXCoreIP.EventHandler = function()
    ipAddress = getIpAddress()
end
Controls.DMXCorePort.EventHandler = function()
    port = getPort()
end
Controls.Blink.EventHandler = function(control)
    OscSocket:Send(IP, port, oscPacket("/dmxcore/blink", "i", {control.Value}))
end
Controls.MasterDimmer.EventHandler = function(control)
    OscSocket:Send(IP, port, oscPacket("/dmxcore/dimmer/master", "f", {control.Position}))
end
Controls.GoToPreset[1].EventHandler = function()
    OscSocket:Send(
        IP,
        port,
        oscPacket("/dmxcore/preset/" .. Controls.PresetCode[1].String, "i", {math.floor(fadeDuration * 1000)})
    )
end
Controls.GoToPreset[2].EventHandler = function()
    OscSocket:Send(
        IP,
        port,
        oscPacket("/dmxcore/preset/" .. Controls.PresetCode[2].String, "i", {math.floor(fadeDuration * 1000)})
    )
end
Controls.GoToPreset[3].EventHandler = function()
    OscSocket:Send(
        IP,
        port,
        oscPacket("/dmxcore/preset/" .. Controls.PresetCode[3].String, "i", {math.floor(fadeDuration * 1000)})
    )
end
Controls.GoToPreset[4].EventHandler = function()
    OscSocket:Send(
        IP,
        port,
        oscPacket("/dmxcore/preset/" .. Controls.PresetCode[4].String, "i", {math.floor(fadeDuration * 1000)})
    )
end
Controls.GoToPreset[5].EventHandler = function()
    OscSocket:Send(
        IP,
        port,
        oscPacket("/dmxcore/preset/" .. Controls.PresetCode[5].String, "i", {math.floor(fadeDuration * 1000)})
    )
end
Controls.GoToPreset[6].EventHandler = function()
    OscSocket:Send(
        IP,
        port,
        oscPacket("/dmxcore/preset/" .. Controls.PresetCode[6].String, "i", {math.floor(fadeDuration * 1000)})
    )
end

Controls.PlayCue[1].EventHandler = function()
    OscSocket:Send(IP, port, oscPacket("/dmxcore/cue/" .. Controls.CueCode[1].String, "i", {loopCount}))
end
Controls.PlayCue[2].EventHandler = function()
    OscSocket:Send(IP, port, oscPacket("/dmxcore/cue/" .. Controls.CueCode[2].String, "i", {loopCount}))
end
Controls.PlayCue[3].EventHandler = function()
    OscSocket:Send(IP, port, oscPacket("/dmxcore/cue/" .. Controls.CueCode[3].String, "i", {loopCount}))
end
Controls.PlayCue[4].EventHandler = function()
    OscSocket:Send(IP, port, oscPacket("/dmxcore/cue/" .. Controls.CueCode[4].String, "i", {loopCount}))
end
Controls.PlayCue[5].EventHandler = function()
    OscSocket:Send(IP, port, oscPacket("/dmxcore/cue/" .. Controls.CueCode[5].String, "i", {loopCount}))
end
Controls.PlayCue[6].EventHandler = function()
    OscSocket:Send(IP, port, oscPacket("/dmxcore/cue/" .. Controls.CueCode[6].String, "i", {loopCount}))
end

Controls.StopCue.EventHandler = function()
    OscSocket:Send(IP, port, oscPacket("/dmxcore/cuecontrol/stop", nil, {}))
end

Controls.FadeDuration.EventHandler = function(control)
    fadeDuration = control.Value
    Controls.FadeDurationDisplay.String = string.format("%.1f", fadeDuration) .. " s"
end

Controls.LoopCount.EventHandler = function(control)
    loopCount = control.Value
    if loopCount == 0 then
        Controls.LoopCountDisplay.String = "Infinite"
    else
        Controls.LoopCountDisplay.String = string.format("%.0f", loopCount)
    end
end

Controls.FadeToBlack.EventHandler = function()
    OscSocket:Send(IP, port, oscPacket("/dmxcore/dimmer/master/fadeto", "fi", {0, math.floor(fadeDuration * 1000)}))
end
Controls.FadeTo100.EventHandler = function()
    OscSocket:Send(IP, port, oscPacket("/dmxcore/dimmer/master/fadeto", "fi", {1, math.floor(fadeDuration * 1000)}))
end
